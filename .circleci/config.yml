version: 2.1

jobs:
  test-build:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test
      # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  upload-docker:
    description: Upload to Dockerhub
    docker:
      - image: docker:stable
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            docker image ls
      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:${CIRCLE_WORKFLOW_ID:0:7}
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-infrastructure:
    description: Deploy Infrastructure EKS
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      
      # - run:
      #     name: Ensure EKS network exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file cloudformation/networks.yml \
      #         --tags project=${ENVIRONMENT_NAME}-project \
      #         --stack-name ${ENVIRONMENT_NAME}-eks-network \
      #         --region ${AWS_DEFAULT_REGION}
      # - run:
      #     name: Ensure EKS Cluster exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file cloudformation/cluster.yml \
      #         --tags project=${ENVIRONMENT_NAME}-project \
      #         --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
      #         --capabilities CAPABILITY_NAMED_IAM \
      #         --region ${AWS_DEFAULT_REGION}
      #     no_output_timeout: 15m
      # - run:
      #     name: Ensure Nodegroup exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file cloudformation/nodegroup.yml \
      #         --tags project=${ENVIRONMENT_NAME}-project \
      #         --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup" \
      #         --capabilities CAPABILITY_NAMED_IAM \
      #         --region ${AWS_DEFAULT_REGION}
      
      - run:
          name: Ensure management instances exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/management.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --output text >> ~/checkDeployed.txt
            cat ~/checkDeployed.txt
      - run:
          name: Extract the IPs of the management instances for Ansible
          command: |
            echo [management] > ~/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
              --region ${AWS_DEFAULT_REGION} \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - checkDeployed.txt

  configure-env-server:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "6f:d8:99:93:0b:e9:44:47:eb:49:45:4c:b3:c6:5a:37"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            # echo "process config server"
            # cat ~/inventory.txt
            # cd .circleci/ansible
            # ansible-playbook -i ~/inventory.txt configure-env-server.yml
              
            if grep -q "No changes to deploy" ~/checkDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd .circleci/ansible
                ansible-playbook -i ~/inventory.txt configure-env-server.yml
              fi

  start-minikube-server:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "6f:d8:99:93:0b:e9:44:47:eb:49:45:4c:b3:c6:5a:37"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            # echo "process config server"
            # cat ~/inventory.txt
            # cd .circleci/ansible
            # ansible-playbook -i ~/inventory.txt configure-env-server.yml
              
            if grep -q "No changes to deploy" ~/checkDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd .circleci/ansible
                ansible-playbook -i ~/inventory.txt start-minikube-server.yml
              fi

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "6f:d8:99:93:0b:e9:44:47:eb:49:45:4c:b3:c6:5a:37"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            # echo "process config server"
            # cat ~/inventory.txt
            # cd .circleci/ansible
            # ansible-playbook -i ~/inventory.txt configure-server.yml
              
            if grep -q "No changes to deploy" ~/checkDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd .circleci/ansible
                ansible-playbook -i ~/inventory.txt configure-server.yml
              fi
            
  configure-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "6f:d8:99:93:0b:e9:44:47:eb:49:45:4c:b3:c6:5a:37"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            if grep -q "No changes to deploy" ~/checkDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd .circleci/ansible
                ansible-playbook -i ~/inventory.txt configure-cluster.yml
              fi
      - run:
          name: Wait for LoadBalancer's domain to become reachable
          command: |
            if grep -q "No changes to deploy" ~/checkDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                echo "Wait 60 seconds..."
                sleep 60
              fi
      - run:
          name: Display the LoadBalancer's DNS name
          command: |
            cat ~/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt save-elb-dns.yml
            cat ~/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - elb_dns.txt

  deploy-docker:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "6f:d8:99:93:0b:e9:44:47:eb:49:45:4c:b3:c6:5a:37"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy newest Docker Image
          command: |
            cat ~/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt deploy-app.yml
          no_output_timeout: 2m  

workflows:
  default:
    jobs:
      - test-build
      - upload-docker:
          requires:
            - test-build
          filters:
            branches:
              only: [ master ]
      - deploy-infrastructure:
          filters:
            branches:
              only: [ master ]
      - configure-env-server:
          requires:
            - deploy-infrastructure
      - start-minikube-server:
            requires:
            - configure-env-server
      - configure-infrastructure:
          requires:
            - start-minikube-server     
      - configure-cluster:
          requires:
            - configure-infrastructure
            - upload-docker
      - deploy-docker:
          requires:
            - configure-cluster
